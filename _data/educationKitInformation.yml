header:
  title: Education Kit Information Page.

kits:
  - title: Efficient Embedded Systems Design and Programming 
    description: |
        This education kit focuses on the design and development of modern embedded systems, emphasizing the attributes and constraints inherent to embedded platforms, including limitations on operating systems, programming languages, and the selection of microcontrollers or microprocessors. It offers detailed coverage of the Armv8-M processor architecture, highlighting TrustZone security technology as implemented in Cortex-M33 microcontrollers. Learners gain foundational knowledge in software design and software engineering principles, enabling them to choose appropriate programming techniques based on design requirements. The kit fosters the ability to evaluate implementation outcomes—such as speed, cost, and power consumption—and correlate them with the programming methods used. Through practical exercises, learners will use commercial development tools to build and program Arm-based embedded systems tailored to specific user specifications. They will also develop and execute programs that utilize TrustZone features to manage secure and non-secure I/O operations on Cortex-M33 devices. This hands-on, security-aware approach equips learners with the critical skills required to build efficient, secure, and standards-compliant embedded solutions.
    url: https://github.com/arm-university/Efficient-Embedded-Systems-Design-Education-Kit
    subjects: ["Embedded systems hardware & firmware"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Rapid Embedded Systems Design and Programming 
    description: |
        This education kit provides an in-depth exploration of Arm processor architectures and Arm-based microcontrollers as powerful platforms for modern embedded computing. It emphasizes the use of high-level programming APIs, particularly the Mbed platform, to accelerate the rapid prototyping and development of embedded applications. Learners gain knowledge of embedded system characteristics, the flow of programming Arm processors, and the integration of microcontroller peripherals using digital and analog I/O, interrupts, pulse-width modulation (PWM), timers, and key serial communication protocols such as UART, SPI, and I2C. The kit also introduces the features of Real-Time Operating Systems (RTOS) and demonstrates how Mbed RTOS APIs support multitasking applications. Practical experience includes using the Mbed Command-line Interface (CLI) to import, compile, and run embedded projects, utilizing Mbed Studio to develop peripheral control functions, implementing serial communications, and designing applications like an advanced music player and dynamic LED displays. By combining theoretical knowledge with hands-on development, this kit equips learners with essential skills in embedded programming, real-time systems, and API-driven design using the Mbed ecosystem.
    url: https://github.com/arm-university/Rapid-Embedded-Education-Kit
    subjects: ["Embedded systems hardware & firmware", "IoT development & Mbed API"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Internet of Things
    description: |
      This education kit offers a holistic introduction to the Internet of Things (IoT), covering essential theoretical, intellectual, and practical aspects of IoT and embedded systems development. Learners gain foundational knowledge of IoT fundamentals, embedded and Android application programming, cloud computing, and networking technologies such as Bluetooth, BLE, LoRaWAN, NB-IoT, and IEEE 802.11. The kit explores embedded system architectures, Mbed Platform and CMSIS-based development, and critical security considerations in IoT environments. Students will examine IoT standardization efforts and current trends shaping the future of connected systems. Practical modules include programming microcontroller peripherals, creating and debugging Android apps, implementing BLE communication (e.g., a heart rate monitor), and transmitting sensor data to mobile apps and cloud platforms. Additionally, learners will develop cloud-connected applications that integrate real-time sensor data and deploy a simple neural network model to classify activity types. This hands-on kit equips learners with applied experience in IoT development, wireless connectivity, sensor interfacing, edge-to-cloud data transmission, mobile integration, and machine learning in the cloud.
    url: https://github.com/arm-university/internet-of-things-education-kit
    subjects: ["IoT development"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Digital Signal Processing 
    description: |
      This Digital Signal Processing (DSP) education kit offers a comprehensive blend of theoretical foundations, intellectual understanding, and hands-on experience using Arm-based development boards. 
      It covers key DSP concepts such as discrete-time linear time-invariant (LTI) systems, convolution, correlation, FIR and IIR filter design, and the application of impulse invariant and bilinear transform methods. Learners explore the use of Fourier analysis techniques including DFT and FFT, and study the z-transform and Nyquist theorem for signal representation. The kit also includes practical implementation of adaptive filtering using LMS algorithms in applications like prediction, system identification, noise cancellation, and equalization. With integrated support for hardware setup, real-time signal sampling and reconstruction using audio codecs and DACs, and filter design using the window method, this kit equips learners to build real-world DSP systems on Arm-based platforms.
    url:
      - https://github.com/arm-university/Digital-Signal-Processing-Education-Kit
    subjects: ["Arm architecture & microprocessors"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Real-Time Operating Systems Design and Programming 
    description: |
      This education kit provides a foundational understanding of Real-Time Operating Systems (RTOS), covering core concepts such as tasks, threads, task scheduling, and memory allocation. Learners will explore essential topics in file system management, data handling, and the principles of parallel programming within embedded environments. The kit develops intellectual skills by enabling learners to select appropriate programming techniques for RTOS-based applications and evaluate implementation outcomes—such as speed, cost, and power consumption—in relation to those techniques. Through practical exercises, participants will gain hands-on experience using commercial tools to develop and optimize RTOS-based applications according to specific user requirements. By focusing on real-world scenarios and performance trade-offs, this kit equips learners to build efficient, scalable, and responsive embedded systems using RTOS frameworks.
    url: https://github.com/arm-university/Real-Time-Operating-Systems-Design-And-Programming-Education-Kit
    subjects: 
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Embedded Linux
    description: |
      This education kit delivers an in-depth exploration of embedded Linux, focusing on the architecture of the embedded Linux operating system and the component stack that supports Linux-based embedded systems. Learners gain detailed knowledge of Linux kernel modules, the system boot process, system configuration, and the mechanisms for communication between kernel space and user space. The kit emphasizes essential skills in system debugging and profiling using industry-standard tools. It fosters intellectual capabilities by teaching learners how to choose appropriate software tools for embedded Linux system development and evaluate implementation outcomes—such as speed, cost, and power efficiency—in relation to the chosen architecture and design. Through hands-on practice, learners will configure and build a complete embedded Linux system stack, develop custom kernel modules for peripheral devices, and apply debugging and profiling techniques to optimize system performance. This kit equips learners with the technical and analytical skills required to design, develop, and maintain robust and efficient embedded Linux solutions.
    url:
      - https://github.com/arm-university/Embedded-Linux-Education-Kit
    subjects: ["Operating Systems and RTOS"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Introduction to SoC Design
    description: |
      This education kit provides a comprehensive introduction to System-on-Chip (SoC) design and development using the Arm Cortex-M0 processor and AHB-Lite bus architecture. It covers the advantages and limitations of SoCs, along with the key features of the Cortex-M0 architecture, including the use of Arm instruction sets to write simple and power-efficient assembly code. Learners gain a deep understanding of the AHB-Lite bus system, including the roles of the address decoder and subordinate multiplexor. The kit develops intellectual skills by exploring the components and functions of various AHB peripherals such as VGA, UART, Timer, GPIO, and 7-segment display. It also covers the concepts of interrupts and exceptions, how the Cortex-M0 handles them, and the use of CMSIS (Cortex Microcontroller Software Interface Standard) to write device drivers for AHB peripherals. The benefits of using high-level APIs over low-level programming are also emphasized. Practical activities include implementing an SoC on an FPGA with a Cortex-M0 processor and AHB-Lite bus, integrating peripherals like memory, LED, VGA, UART, Timer, GPIO, and 7-segment display, and writing programs to control them. Learners will also implement UART and timer interrupt mechanisms in both hardware and software domains, including writing interrupt handlers in C. This kit equips learners with practical and theoretical skills essential for modern SoC-based embedded system development.
    url:
      - https://github.com/arm-university/Introduction-to-SoC-Design-Education-Kit
    subjects: ["SoC Design"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Advanced SoC Design 
    description: |
      This education kit offers a detailed exploration of advanced System on Chip (SoC) design using Armv7-A architecture, with a focus on the microarchitecture of the Cortex-A9 processor and its integration within an SoC environment. Learners will gain knowledge of the SoC design flow, the properties of SoC systems, and the operation of Armv7-A assembly instructions including data transfer, data processing, conditional, branching, and miscellaneous instruction types. The kit covers the AMBA AXI4 Bus Architecture and includes hands-on experience with AXI4-Stream peripherals, such as configuring and operating an HDMI input peripheral for video display. Learners will study the roles of GPIO, memory access and controllers, various memory types, and UART communication within SoCs. Intellectual components include understanding the structure and function of debugging systems in Arm-based designs, the HDMI interface mechanism, and the implementation of a simple edge detection image processing application. The kit also introduces SIMD and Arm Neon technology for accelerating image processing and the concept and implementation of hardware acceleration. Practical skills include developing Arm-based SoCs using commercial tools, programming Cortex-A9 processors on Fixed Virtual Platforms using Assembly and C, and implementing AXI-Lite peripherals for GPIO control. Learners will also configure AXI4-Stream HDMI peripherals to output images to HDMI monitors, reinforcing their grasp of SoC communication, multimedia, and embedded hardware-software co-design.
    url: https://github.com/arm-university/Advanced-System-on-Chip-Design-Education-Kit
    subjects: ["SoC Design"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Advanced"]
    Format: ["Education Kit"]

  - title: Introduction to Robotic Systems 
    description: |
      This education kit provides a comprehensive introduction to the design and implementation of robotic systems, with a focus on both embedded and high-level control using the Arm Cortex-M7 processor and the Robot Operating System (ROS). Learners will explore the basic definitions, concepts, and design elements of robotics, alongside the features, benefits, and functions of the Cortex-M7 architecture, including its memory map, instruction set syntax, and endianness. The kit also covers the concepts of interrupts and exceptions and their handling mechanisms. Intellectual outcomes include understanding power supply components in autonomous cars, the working principles of DC motors, the use of FET switches in motor controllers, and the application of various motor controller topologies and pulse-width modulation (PWM) for steering and velocity control. Optical sensing techniques are explored for tasks such as velocity measurement and line following, while control theory and SLAM (Simultaneous Localization and Mapping) are introduced for autonomous navigation. Practical experience includes writing C programs that call Arm assembly subroutines, analyzing CPU timing behavior with debug tools, and programming PWM outputs to control hardware like LEDs and motors. Students will program a robot to move linearly, follow lines using infrared sensors, and use ROS for tasks such as obstacle detection, keyboard control, and inter-node communication via the ROS computation graph. Advanced ROS-based applications include implementing SLAM, autonomous navigation, and a voice-controlled robot using speech-to-text libraries. This kit equips learners with the theoretical knowledge and practical skills needed to build intelligent, autonomous robotic systems integrating embedded control and ROS-based software.
    url: https://github.com/arm-university/Introduction-to-Robotic-Systems-Education-Kit
    subjects: ["Robotics and Applications"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Graphics and Mobile Gaming
    description: |
       This education kit delivers a comprehensive foundation in modern 3D graphics programming and game development, with a strong emphasis on OpenGL ES rendering techniques and the architecture of the Arm Mali GPU. Learners will explore common graphics APIs such as OpenGL (ES) and Vulkan, and gain a deep understanding of the OpenGL ES rendering pipeline, including shader programming using vertex and fragment shaders. The kit covers essential concepts in game design methodology, game physics, and logic programming, as well as advanced 3D graphical effects such as texture mapping, lighting, and matrix-based object transformations. Intellectual outcomes include the ability to evaluate performance and power optimization techniques for mobile graphics applications, identify object creation and animation techniques for 3D scenes, and understand the integration of Virtual Reality (VR) and Augmented Reality (AR) technologies in game development. Practical skills include developing Android applications that incorporate OpenGL ES, building immersive 3D environments using the Unity game engine and IDE, and creating visually dynamic applications with AR/VR capabilities. Learners will also utilize Arm Performance Studio tools such as Streamline and Graphics Analyzer to profile and optimize OpenGL ES applications. This kit equips students with the tools, techniques, and performance-aware design strategies essential for creating engaging, efficient 3D graphics and games on mobile and embedded platforms.
    url: https://github.com/arm-university/Graphics-and-Mobile-Gaming-Education-Kit
    subjects: ["Robotics and Applications"]
    platform: 
    sw-hw: [Hardware]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: Introduction to Computer Architecture 
    description: |
      This education kit offers an in-depth exploration of computer architecture fundamentals, emphasizing the design and operation of simple processors and instruction set architectures, with a focus on the Arm instruction set architecture, particularly Armv8-A AArch64. Learners will study the functions, benefits, and drawbacks of superpipelined and superscalar processor designs, along with memory hierarchies, types, and the roles of caches—including performance classifications and cache design. The kit also addresses multicore processor functionality, covering concepts such as multicore communication, cache coherence, and memory consistency, as well as the benefits and trade-offs of multithreading approaches including multitasking, fine-grained and coarse-grained multithreading, and simultaneous multithreading (SMT). Key topics also include data-level parallelism with vector processors, SIMD, and GPUs. Intellectual components involve understanding the evolution and trends of computer architecture, basic and advanced processor pipelining techniques, hazard detection and resolution, branch and exception handling, and System-on-Chip (SoC) design considerations. Practical work includes setting up software tools like Icarus Verilog, the GNU Toolchain for A-profile architectures, and GTKWave. Learners will write and simulate Armv8-A AArch64 assembly code on the Arm Education Core, interpret instruction encodings, and demonstrate the behavior of pipeline stages including Instruction Fetch, Decode, Execution, Memory Access, and WriteBack. They will also implement pipeline techniques such as forwarding paths for RAW hazards, stalling, and control hazard solutions, while estimating power, performance, and area metrics. This kit prepares students to analyze, design, and simulate modern processor architectures and SoCs with a hands-on, architecture-driven approach.
    url: https://github.com/arm-university/Introduction-to-Computer-Architecture-Education-Kit
    subjects: 
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: VLSI Fundamentals - A Practical Approach  
    description: |
      This education kit provides a comprehensive foundation in digital integrated circuit (IC) design, focusing on both theoretical principles and practical implementation from the transistor level to physical design. Learners will study the nonideal characteristics of transistors, including high field effects, channel length modulation, threshold voltage variation, and leakage, and understand their impact on CMOS circuit behavior. Key topics include estimating CMOS characteristics such as noise margins, DC response, and RC delay models, as well as resistance and capacitance in on-chip wires with optimization methods for delay, power consumption, and crosstalk. The kit covers the operation and layout planning of CMOS latches and flip-flops using stick diagrams, and explores timing constraints like setup and hold times, propagation delays, and contamination delays in sequential circuits. Important concepts in testing such as stuck-at faults, Automatic Test Pattern Generation (ATPG), Built-in Self Test (BIST), and various SRAM architectures are also addressed. Learners will analyze sources of power dissipation and clock network effects on skew and power, and understand on-chip variation. Circuit simulation using SPICE is included to analyze DC transfer characteristics, transient response, and power consumption. Intellectual outcomes involve understanding nMOS and pMOS characteristics, drawing CMOS inverter cross-sections, interpreting MOS I-V curves across operating regions, and analyzing the impact of technology scaling. Learners will apply logical effort for delay minimization and explore delay/power trade-offs in combinational logic circuits, including adder architectures like Carry-Ripple, Carry-Skip, Carry-Lookahead, Carry-Select, Carry-Increment, and Tree Adders. They will also design datapath components such as comparators, shifters, adders, multipliers, and ESD protection circuits. Practical tasks include designing, simulating, and verifying logic gates from transistor-level schematics to layout, using tools like NC-Verilog, Design Compiler, and SOC Encounter for synthesis, placement, and routing, and completing chip assembly and tape-out in GDSII format. This kit equips learners with the essential skills for modern CMOS VLSI design, simulation, verification, and physical implementation.
    url: https://www.arm.com/resources/education/education-kits/vlsi-fundamentals-a-practical-approach
    subjects: ["VLSI Design"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]

  - title: VLSI Fundamentals- A Practical Approach – Cadence Edition  
    description: |
      This education kit offers a comprehensive exploration of CMOS VLSI design, covering both theoretical foundations and hands-on implementation using industry-standard tools. Learners gain knowledge of nonideal transistor characteristics, including high field effects, channel length modulation, threshold voltage variation, and leakage, as well as techniques to estimate CMOS circuit behavior such as noise margins, DC response, and RC delay models. The kit explores resistance and capacitance estimation in on-chip wires, with methods to optimize wire delay, power consumption, and crosstalk. It includes detailed coverage of CMOS latches and flip-flops, cell layout planning with stick diagrams, and timing constraints such as setup and hold time, propagation delay, and contamination delay in sequential circuits. Learners are introduced to essential chip testing concepts including stuck-at faults, automatic test pattern generation (ATPG), and built-in self test (BIST), alongside different SRAM architectures, power dissipation sources, and mitigation strategies. Clock distribution network implications on skew and power, and the effects of on-chip variation are also discussed. Circuit simulation using SPICE is employed to analyze DC transfer characteristics, transient response, and power consumption. Intellectual competencies include understanding and drawing CMOS inverter cross-sections, analyzing MOS I-V characteristics across operating regions, evaluating the impact of technology scaling, and applying logical effort for minimizing delay in combinational circuits. The kit covers combinational logic optimization, adder architectures such as carry-ripple, carry-skip, carry-lookahead, carry-select, carry-increment, and tree adders, and the design of datapath elements like comparators, shifters, multi-input adders, and multipliers. It also addresses electrostatic discharge (ESD) protection and processor design across abstraction levels from architecture and microarchitecture to logic, circuit, and physical design. Practically, learners design and simulate logic gates from transistor-level schematics to layout, use NC-Verilog for verification, apply Cadence Genus™ for synthesis and Cadence Innovus™ for place and route, and complete chip assembly with pad frame integration and GDSII tape-out. This kit equips students with the critical skills and knowledge to design, optimize, verify, and implement digital ICs in modern semiconductor environments.
                    The course is ideal for beginners who want to enter the semiconductor industry or deepen their knowledge of integrated systems design.
    url: https://www.cadence.com/en_US/home/company/cadence-academic-network/educators/vlsi-fundamentals.html?utm_source=arm&utm_medium=armweb&utm_campaign=vlsikit&utm_content=10_21%20VLSI%20Fundamentals
    subjects: ["VLSI Design"]
    platform: 
    sw-hw: ["Hardware"]
    level: ["Beginner"]
    Format: ["Education Kit"]
